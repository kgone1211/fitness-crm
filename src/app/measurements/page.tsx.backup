'use client';

import Layout from '@/components/Layout';
import { Scale, Plus, TrendingUp, TrendingDown, Calendar, Users, BarChart3, Download, Edit, Trash2, X, Save, Filter } from 'lucide-react';
import { useState } from 'react';

interface Measurement {
  date: string;
  weight: number;
  bodyFat: number;
  muscleMass: number;
  waist: number;
  chest: number;
  arms: number;
  thighs: number;
  hips: number;
}

interface ClientMeasurement {
  id: string;
  clientName: string;
  clientId: string;
  latestMeasurements: Measurement;
  previousMeasurements: Measurement;
  progress: {
    weight: number;
    bodyFat: number;
    muscleMass: number;
    waist: number;
    chest: number;
    arms: number;
    thighs: number;
    hips: number;
  };
  totalMeasurements: number;
}

export default function MeasurementsPage() {
  const [measurements, setMeasurements] = useState<ClientMeasurement[]>([
    {
      id: '1',
      clientName: 'John Doe',
      clientId: '1',
      latestMeasurements: {
        date: '2024-01-20',
        weight: 180,
        bodyFat: 15.2,
        muscleMass: 153,
        waist: 34,
        chest: 42,
        arms: 15.5,
        thighs: 24,
        hips: 38
      },
      previousMeasurements: {
        date: '2024-01-13',
        weight: 182,
        bodyFat: 16.1,
        muscleMass: 152,
        waist: 35,
        chest: 41.5,
        arms: 15.2,
        thighs: 23.8,
        hips: 38.5
      },
      progress: {
        weight: -2,
        bodyFat: -0.9,
        muscleMass: +1,
        waist: -1,
        chest: +0.5,
        arms: +0.3,
        thighs: +0.2,
        hips: -0.5
      },
      totalMeasurements: 8
    },
    {
      id: '2',
      clientName: 'Jane Smith',
      clientId: '2',
      latestMeasurements: {
        date: '2024-01-19',
        weight: 140,
        bodyFat: 18.5,
        muscleMass: 114,
        waist: 28,
        chest: 36,
        arms: 12.5,
        thighs: 22,
        hips: 36
      },
      previousMeasurements: {
        date: '2024-01-12',
        weight: 142,
        bodyFat: 19.2,
        muscleMass: 113,
        waist: 29,
        chest: 35.5,
        arms: 12.2,
        thighs: 21.8,
        hips: 36.5
      },
      progress: {
        weight: -2,
        bodyFat: -0.7,
        muscleMass: +1,
        waist: -1,
        chest: +0.5,
        arms: +0.3,
        thighs: +0.2,
        hips: -0.5
      },
      totalMeasurements: 6
    },
    {
      id: '3',
      clientName: 'Mike Johnson',
      clientId: '3',
      latestMeasurements: {
        date: '2024-01-18',
        weight: 200,
        bodyFat: 22.1,
        muscleMass: 156,
        waist: 40,
        chest: 44,
        arms: 16,
        thighs: 26,
        hips: 42
      },
      previousMeasurements: {
        date: '2024-01-11',
        weight: 203,
        bodyFat: 23.0,
        muscleMass: 155,
        waist: 41,
        chest: 43.5,
        arms: 15.8,
        thighs: 25.8,
        hips: 42.5
      },
      progress: {
        weight: -3,
        bodyFat: -0.9,
        muscleMass: +1,
        waist: -1,
        chest: +0.5,
        arms: +0.2,
        thighs: +0.2,
        hips: -0.5
      },
      totalMeasurements: 4
    }
  ]);

  const [showEditModal, setShowEditModal] = useState(false);
  const [showAnalyticsModal, setShowAnalyticsModal] = useState(false);
  const [showFilterModal, setShowFilterModal] = useState(false);
  const [selectedClient, setSelectedClient] = useState<ClientMeasurement | null>(null);
  const [editedMeasurements, setEditedMeasurements] = useState<Measurement | null>(null);

  const getProgressIcon = (value: number) => {
    if (value > 0) return <TrendingUp className="h-4 w-4 text-green-600" />;
    if (value < 0) return <TrendingDown className="h-4 w-4 text-blue-600" />;
    return <div className="h-4 w-4" />;
  };

  const getProgressColor = (value: number, isGood: boolean = true) => {
    if (value > 0) return isGood ? 'text-green-600' : 'text-red-600';
    if (value < 0) return isGood ? 'text-blue-600' : 'text-red-600';
    return 'text-gray-600';
  };

  const getProgressBgColor = (value: number, isGood: boolean = true) => {
    if (value > 0) return isGood ? 'bg-green-50' : 'bg-red-50';
    if (value < 0) return isGood ? 'bg-blue-50' : 'bg-red-50';
    return 'bg-gray-50';
  };

  const handleEdit = (client: ClientMeasurement) => {
    setSelectedClient(client);
    setEditedMeasurements({ ...client.latestMeasurements });
    setShowEditModal(true);
  };

  const handleSaveEdit = () => {
    if (!selectedClient || !editedMeasurements) return;

    const updatedMeasurements = measurements.map(client => {
      if (client.id === selectedClient.id) {
        const newProgress = {
          weight: editedMeasurements.weight - client.previousMeasurements.weight,
          bodyFat: editedMeasurements.bodyFat - client.previousMeasurements.bodyFat,
          muscleMass: editedMeasurements.muscleMass - client.previousMeasurements.muscleMass,
          waist: editedMeasurements.waist - client.previousMeasurements.waist,
          chest: editedMeasurements.chest - client.previousMeasurements.chest,
          arms: editedMeasurements.arms - client.previousMeasurements.arms,
          thighs: editedMeasurements.thighs - client.previousMeasurements.thighs,
          hips: editedMeasurements.hips - client.previousMeasurements.hips,
        };

        return {
          ...client,
          latestMeasurements: editedMeasurements,
          progress: newProgress
        };
      }
      return client;
    });

    setMeasurements(updatedMeasurements);
    setShowEditModal(false);
    setSelectedClient(null);
    setEditedMeasurements(null);
    alert('Measurements updated successfully!');
  };

  const handleViewAnalytics = (client: ClientMeasurement) => {
    setSelectedClient(client);
    setShowAnalyticsModal(true);
  };

  const handleExportData = () => {
    const csvContent = `Client Name,Date,Weight (lbs),Body Fat (%),Muscle Mass (lbs),Waist (in),Chest (in),Arms (in),Thighs (in),Hips (in)
${measurements.map(client => 
  `${client.clientName},${client.latestMeasurements.date},${client.latestMeasurements.weight},${client.latestMeasurements.bodyFat},${client.latestMeasurements.muscleMass},${client.latestMeasurements.waist},${client.latestMeasurements.chest},${client.latestMeasurements.arms},${client.latestMeasurements.thighs},${client.latestMeasurements.hips}`
).join('\n')}`;

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `measurements-${new Date().toISOString().split('T')[0]}.csv`);
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    alert('Measurements data exported successfully!');
  };

  const handleFilter = () => {
    setShowFilterModal(true);
  };

  const handleApplyFilter = (filterType: string) => {
    alert(`Filter applied: ${filterType}\n\nThis would filter the measurements based on the selected criteria.`);
    setShowFilterModal(false);
  };

  const handleAddMeasurement = () => {
    alert('Add New Measurement:\n\nThis would open a form to add new measurements for a client.');
  };

  return (
    <Layout userRole="coach">
      <div className="space-y-6">
        {/* Header */}
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Body Measurements</h1>
            <p className="text-gray-600">Track client body measurements and progress</p>
          </div>
          <div className="flex items-center space-x-3">
            <button 
              onClick={handleExportData}
              className="flex items-center px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors"
            >
              <Download className="h-4 w-4 mr-2" />
              Export Data
            </button>
            <button 
              onClick={handleAddMeasurement}
              className="flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              <Plus className="h-4 w-4 mr-2" />
              Add Measurement
            </button>
          </div>
        </div>

        {/* Stats Cards */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Users className="h-6 w-6 text-blue-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Active Clients</p>
                <p className="text-2xl font-bold text-gray-900">{measurements.length}</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <Scale className="h-6 w-6 text-green-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Avg Weight Loss</p>
                <p className="text-2xl font-bold text-gray-900">-2.3 lbs</p>
                <p className="text-sm text-gray-500">this week</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <TrendingUp className="h-6 w-6 text-purple-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Muscle Gain</p>
                <p className="text-2xl font-bold text-gray-900">+1.0 lbs</p>
                <p className="text-sm text-gray-500">avg per client</p>
              </div>
            </div>
          </div>
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <div className="p-2 bg-orange-100 rounded-lg">
                <BarChart3 className="h-6 w-6 text-orange-600" />
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-500">Body Fat</p>
                <p className="text-2xl font-bold text-gray-900">-0.8%</p>
                <p className="text-sm text-gray-500">avg reduction</p>
              </div>
            </div>
          </div>
        </div>

        {/* Measurements List */}
        <div className="space-y-6">
          {measurements.map((client) => (
            <div key={client.id} className="bg-white rounded-lg shadow overflow-hidden">
              <div className="px-6 py-4 border-b border-gray-200">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                      <span className="text-blue-600 font-semibold">
                        {client.clientName.split(' ').map(n => n[0]).join('')}
                      </span>
                    </div>
                    <div>
                      <h3 className="text-lg font-semibold text-gray-900">{client.clientName}</h3>
                      <div className="flex items-center space-x-4 text-sm text-gray-600">
                        <span>{client.totalMeasurements} measurements</span>
                        <span>Latest: {new Date(client.latestMeasurements.date).toLocaleDateString()}</span>
                      </div>
                    </div>
                  </div>
                  <div className="flex items-center space-x-2">
                    <button 
                      onClick={() => handleEdit(client)}
                      className="p-2 text-gray-500 hover:text-blue-600 hover:bg-blue-50 rounded-lg transition-colors"
                      title="Edit Measurements"
                    >
                      <Edit className="h-4 w-4" />
                    </button>
                    <button 
                      onClick={() => handleViewAnalytics(client)}
                      className="p-2 text-gray-500 hover:text-green-600 hover:bg-green-50 rounded-lg transition-colors"
                      title="View Analytics"
                    >
                      <BarChart3 className="h-4 w-4" />
                    </button>
                  </div>
                </div>
              </div>

              <div className="p-6">
                {/* Key Metrics */}
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
                  <div className="text-center p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-gray-900">{client.latestMeasurements.weight} lbs</div>
                    <div className="text-sm text-gray-600">Weight</div>
                    <div className={`text-sm font-medium ${getProgressColor(client.progress.weight, false)}`}>
                      {client.progress.weight > 0 ? '+' : ''}{client.progress.weight} lbs
                    </div>
                  </div>
                  <div className="text-center p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-gray-900">{client.latestMeasurements.bodyFat}%</div>
                    <div className="text-sm text-gray-600">Body Fat</div>
                    <div className={`text-sm font-medium ${getProgressColor(client.progress.bodyFat, false)}`}>
                      {client.progress.bodyFat > 0 ? '+' : ''}{client.progress.bodyFat}%
                    </div>
                  </div>
                  <div className="text-center p-4 bg-gray-50 rounded-lg">
                    <div className="text-2xl font-bold text-gray-900">{client.latestMeasurements.muscleMass} lbs</div>
                    <div className="text-sm text-gray-600">Muscle Mass</div>
                    <div className={`text-sm font-medium ${getProgressColor(client.progress.muscleMass, true)}`}>
                      {client.progress.muscleMass > 0 ? '+' : ''}{client.progress.muscleMass} lbs
                    </div>
                  </div>
                </div>

                {/* Detailed Measurements */}
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h4 className="text-md font-semibold text-gray-900 mb-3">Body Measurements</h4>
                    <div className="space-y-3">
                      {[
                        { label: 'Waist', value: client.latestMeasurements.waist, unit: 'inches', progress: client.progress.waist, isGood: false },
                        { label: 'Chest', value: client.latestMeasurements.chest, unit: 'inches', progress: client.progress.chest, isGood: true },
                        { label: 'Arms', value: client.latestMeasurements.arms, unit: 'inches', progress: client.progress.arms, isGood: true },
                        { label: 'Thighs', value: client.latestMeasurements.thighs, unit: 'inches', progress: client.progress.thighs, isGood: true },
                        { label: 'Hips', value: client.latestMeasurements.hips, unit: 'inches', progress: client.progress.hips, isGood: false }
                      ].map((measurement) => (
                        <div key={measurement.label} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                          <div className="flex items-center space-x-3">
                            {getProgressIcon(measurement.progress)}
                            <span className="font-medium text-gray-900">{measurement.label}</span>
                          </div>
                          <div className="text-right">
                            <div className="font-semibold text-gray-900">
                              {measurement.value} {measurement.unit}
                            </div>
                            <div className={`text-sm font-medium ${getProgressColor(measurement.progress, measurement.isGood)}`}>
                              {measurement.progress > 0 ? '+' : ''}{measurement.progress} {measurement.unit}
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <h4 className="text-md font-semibold text-gray-900 mb-3">Progress Summary</h4>
                    <div className="space-y-3">
                      <div className={`p-3 rounded-lg ${getProgressBgColor(client.progress.weight, false)}`}>
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-gray-900">Weight Change</span>
                          <span className={`font-semibold ${getProgressColor(client.progress.weight, false)}`}>
                            {client.progress.weight > 0 ? '+' : ''}{client.progress.weight} lbs
                          </span>
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                          {client.previousMeasurements.weight} → {client.latestMeasurements.weight} lbs
                        </div>
                      </div>
                      <div className={`p-3 rounded-lg ${getProgressBgColor(client.progress.bodyFat, false)}`}>
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-gray-900">Body Fat Change</span>
                          <span className={`font-semibold ${getProgressColor(client.progress.bodyFat, false)}`}>
                            {client.progress.bodyFat > 0 ? '+' : ''}{client.progress.bodyFat}%
                          </span>
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                          {client.previousMeasurements.bodyFat}% → {client.latestMeasurements.bodyFat}%
                        </div>
                      </div>
                      <div className={`p-3 rounded-lg ${getProgressBgColor(client.progress.muscleMass, true)}`}>
                        <div className="flex items-center justify-between">
                          <span className="font-medium text-gray-900">Muscle Mass Change</span>
                          <span className={`font-semibold ${getProgressColor(client.progress.muscleMass, true)}`}>
                            {client.progress.muscleMass > 0 ? '+' : ''}{client.progress.muscleMass} lbs
                          </span>
                        </div>
                        <div className="text-sm text-gray-600 mt-1">
                          {client.previousMeasurements.muscleMass} → {client.latestMeasurements.muscleMass} lbs
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          ))}
        </div>

        {/* Edit Measurements Modal */}
        {showEditModal && selectedClient && editedMeasurements && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex justify-center items-center">
            <div className="bg-white p-8 rounded-lg shadow-xl max-w-2xl w-full mx-4 relative">
              <button
                onClick={() => setShowEditModal(false)}
                className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
              >
                <X className="h-6 w-6" />
              </button>
              
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Edit Measurements - {selectedClient.clientName}</h3>
              
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Date</label>
                    <input
                      type="date"
                      value={editedMeasurements.date}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, date: e.target.value })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Weight (lbs)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editedMeasurements.weight}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, weight: parseFloat(e.target.value) || 0 })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Body Fat (%)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editedMeasurements.bodyFat}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, bodyFat: parseFloat(e.target.value) || 0 })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Muscle Mass (lbs)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editedMeasurements.muscleMass}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, muscleMass: parseFloat(e.target.value) || 0 })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Waist (inches)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editedMeasurements.waist}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, waist: parseFloat(e.target.value) || 0 })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Chest (inches)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editedMeasurements.chest}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, chest: parseFloat(e.target.value) || 0 })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Arms (inches)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editedMeasurements.arms}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, arms: parseFloat(e.target.value) || 0 })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium text-gray-700 mb-1">Thighs (inches)</label>
                    <input
                      type="number"
                      step="0.1"
                      value={editedMeasurements.thighs}
                      onChange={(e) => setEditedMeasurements({ ...editedMeasurements, thighs: parseFloat(e.target.value) || 0 })}
                      className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">Hips (inches)</label>
                  <input
                    type="number"
                    step="0.1"
                    value={editedMeasurements.hips}
                    onChange={(e) => setEditedMeasurements({ ...editedMeasurements, hips: parseFloat(e.target.value) || 0 })}
                    className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
              </div>

              <div className="mt-8 flex justify-end space-x-3">
                <button
                  onClick={() => setShowEditModal(false)}
                  className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Cancel
                </button>
                <button
                  onClick={handleSaveEdit}
                  className="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                >
                  <Save className="h-4 w-4 mr-2 inline" />
                  Save Changes
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Analytics Modal */}
        {showAnalyticsModal && selectedClient && (
          <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex justify-center items-center">
            <div className="bg-white p-8 rounded-lg shadow-xl max-w-4xl w-full mx-4 relative">
              <button
                onClick={() => setShowAnalyticsModal(false)}
                className="absolute top-4 right-4 text-gray-400 hover:text-gray-600"
              >
                <X className="h-6 w-6" />
              </button>
              
              <h3 className="text-2xl font-bold text-gray-900 mb-6">Analytics - {selectedClient.clientName}</h3>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                {/* Progress Chart Placeholder */}
                <div className="space-y-4">
                  <h4 className="text-lg font-semibold text-gray-900">Progress Trends</h4>
                  <div className="bg-gray-100 rounded-lg p-8 text-center">
                    <BarChart3 className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-600">Progress chart would be displayed here</p>
                    <p className="text-sm text-gray-500 mt-2">
                      Showing weight, body fat, and muscle mass trends over time
                    </p>
                  </div>
                </div>

                {/* Key Insights */}
                <div className="space-y-4">
                  <h4 className="text-lg font-semibold text-gray-900">Key Insights</h4>
                  <div className="space-y-3">
                    <div className="p-4 bg-green-50 rounded-lg">
                      <div className="flex items-center justify-between">
                        <span className="font-medium text-gray-900">Weight Loss</span>
                        <span className="text-green-600 font-semibold">
                          {selectedClient.progress.weight} lbs
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">
                        {selectedClient.progress.weight < 0 ? 'Great progress!' : 'Needs attention'}
                      </p>
                    </div>
                    <div className="p-4 bg-blue-50 rounded-lg">
                      <div className="flex items-center justify-between">
                        <span className="font-medium text-gray-900">Body Fat Reduction</span>
                        <span className="text-blue-600 font-semibold">
                          {selectedClient.progress.bodyFat}%
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">
                        {selectedClient.progress.bodyFat < 0 ? 'Excellent improvement!' : 'Focus on fat loss'}
                      </p>
                    </div>
                    <div className="p-4 bg-purple-50 rounded-lg">
                      <div className="flex items-center justify-between">
                        <span className="font-medium text-gray-900">Muscle Gain</span>
                        <span className="text-purple-600 font-semibold">
                          +{selectedClient.progress.muscleMass} lbs
                        </span>
                      </div>
                      <p className="text-sm text-gray-600 mt-1">
                        Strong muscle development
                      </p>
                    </div>
                  </div>
                </div>
              </div>

              <div className="mt-8 flex justify-end space-x-3">
                <button
                  onClick={() => setShowAnalyticsModal(false)}
                  className="px-6 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors"
                >
                  Close
                </button>
                <button
                  onClick={() => {
                    alert('Exporting analytics data...');
                    setShowAnalyticsModal(false);
                  }}
                  className="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                >
                  <Download className="h-4 w-4 mr-2 inline" />
                  Export Analytics
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Quick Actions */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Measurement Guidelines</h3>
            <div className="space-y-3">
              <div className="flex items-start space-x-3">
                <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                <span className="text-sm text-gray-700">Measure at the same time of day</span>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                <span className="text-sm text-gray-700">Use consistent measuring tools</span>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-2 h-2 bg-purple-500 rounded-full mt-2"></div>
                <span className="text-sm text-gray-700">Measure in the same clothing</span>
              </div>
              <div className="flex items-start space-x-3">
                <div className="w-2 h-2 bg-orange-500 rounded-full mt-2"></div>
                <span className="text-sm text-gray-700">Take measurements weekly</span>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Activity</h3>
            <div className="space-y-3">
              <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                <Scale className="h-5 w-5 text-green-600" />
                <div>
                  <p className="font-medium text-gray-900">John Doe measurements updated</p>
                  <p className="text-sm text-gray-500">Weight: 180 lbs • 2 hours ago</p>
                </div>
              </div>
              <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                <TrendingUp className="h-5 w-5 text-blue-600" />
                <div>
                  <p className="font-medium text-gray-900">Jane Smith showing progress</p>
                  <p className="text-sm text-gray-500">Muscle mass increased • Yesterday</p>
                </div>
              </div>
              <div className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg">
                <Calendar className="h-5 w-5 text-purple-600" />
                <div>
                  <p className="font-medium text-gray-900">Measurement reminder sent</p>
                  <p className="text-sm text-gray-500">Mike Johnson • 3 days ago</p>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Progress Insights</h3>
            <div className="space-y-4">
              <div className="text-center p-4 bg-green-50 rounded-lg">
                <div className="text-2xl font-bold text-green-600">92%</div>
                <div className="text-sm text-gray-600">Clients showing progress</div>
              </div>
              <div className="text-center p-4 bg-blue-50 rounded-lg">
                <div className="text-2xl font-bold text-blue-600">-2.3 lbs</div>
                <div className="text-sm text-gray-600">Avg weight loss</div>
              </div>
              <div className="text-center p-4 bg-purple-50 rounded-lg">
                <div className="text-2xl font-bold text-purple-600">+1.0 lbs</div>
                <div className="text-sm text-gray-600">Avg muscle gain</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}
